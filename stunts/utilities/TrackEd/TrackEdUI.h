// generated by Fast Light User Interface Designer (fluid) version 1.0102

#ifndef TrackEdUI_h
#define TrackEdUI_h
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_PNG_Image.h>
#include "Images.h"
#include "Terrain.h"
#include <FL/Fl_Group.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Button.H>
#include <string>
#include <FL/Fl_Box.H>
#include <FL/Fl_Scroll.H>
#include "TrackData.h"
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Browser.H>
#include <fstream>
#include "Translate.h"

class CTrackEdUI {
public:
  CTrackEdUI();
  Fl_Window *mainWindow;
  Fl_Group *mainGroup;
  Fl_Button *corner_big;
private:
  inline void cb_corner_big_i(Fl_Button*, void*);
  static void cb_corner_big(Fl_Button*, void*);
public:
  Fl_Button *corner_small;
private:
  inline void cb_corner_small_i(Fl_Button*, void*);
  static void cb_corner_small(Fl_Button*, void*);
public:
  Fl_Button *straight_line;
private:
  inline void cb_straight_line_i(Fl_Button*, void*);
  static void cb_straight_line(Fl_Button*, void*);
public:
  Fl_Button *empty;
private:
  inline void cb_empty_i(Fl_Button*, void*);
  static void cb_empty(Fl_Button*, void*);
public:
  Fl_Button *cellTemplate;
private:
  inline void cb_cellTemplate_i(Fl_Button*, void*);
  static void cb_cellTemplate(Fl_Button*, void*);
public:
  Fl_Button *start_goal;
private:
  inline void cb_start_goal_i(Fl_Button*, void*);
  static void cb_start_goal(Fl_Button*, void*);
public:
  Fl_Button *tube_inout;
private:
  inline void cb_tube_inout_i(Fl_Button*, void*);
  static void cb_tube_inout(Fl_Button*, void*);
public:
  Fl_Button *tube;
private:
  inline void cb_tube_i(Fl_Button*, void*);
  static void cb_tube(Fl_Button*, void*);
public:
  Fl_Button *tube_with_wall;
private:
  inline void cb_tube_with_wall_i(Fl_Button*, void*);
  static void cb_tube_with_wall(Fl_Button*, void*);
public:
  Fl_Button *tunnel_inout;
private:
  inline void cb_tunnel_inout_i(Fl_Button*, void*);
  static void cb_tunnel_inout(Fl_Button*, void*);
public:
  Fl_Button *tunnel;
private:
  inline void cb_tunnel_i(Fl_Button*, void*);
  static void cb_tunnel(Fl_Button*, void*);
public:
  Fl_Button *y_split;
private:
  inline void cb_y_split_i(Fl_Button*, void*);
  static void cb_y_split(Fl_Button*, void*);
public:
  Fl_Button *y_split_b;
private:
  inline void cb_y_split_b_i(Fl_Button*, void*);
  static void cb_y_split_b(Fl_Button*, void*);
public:
  Fl_Button *screw;
private:
  inline void cb_screw_i(Fl_Button*, void*);
  static void cb_screw(Fl_Button*, void*);
public:
  Fl_Button *corner_bridge_big;
private:
  inline void cb_corner_bridge_big_i(Fl_Button*, void*);
  static void cb_corner_bridge_big(Fl_Button*, void*);
public:
  Fl_Button *corner_bridge_small;
private:
  inline void cb_corner_bridge_small_i(Fl_Button*, void*);
  static void cb_corner_bridge_small(Fl_Button*, void*);
public:
  Fl_Button *corner_bridge_big_b;
private:
  inline void cb_corner_bridge_big_b_i(Fl_Button*, void*);
  static void cb_corner_bridge_big_b(Fl_Button*, void*);
public:
  Fl_Button *corner_bridge_small_b;
private:
  inline void cb_corner_bridge_small_b_i(Fl_Button*, void*);
  static void cb_corner_bridge_small_b(Fl_Button*, void*);
public:
  Fl_Button *straight_line_bridge;
private:
  inline void cb_straight_line_bridge_i(Fl_Button*, void*);
  static void cb_straight_line_bridge(Fl_Button*, void*);
public:
  Fl_Button *drive_down_bridge;
private:
  inline void cb_drive_down_bridge_i(Fl_Button*, void*);
  static void cb_drive_down_bridge(Fl_Button*, void*);
public:
  Fl_Button *drive_up_bridge;
private:
  inline void cb_drive_up_bridge_i(Fl_Button*, void*);
  static void cb_drive_up_bridge(Fl_Button*, void*);
public:
  Fl_Button *crossover;
private:
  inline void cb_crossover_i(Fl_Button*, void*);
  static void cb_crossover(Fl_Button*, void*);
public:
  Fl_Button *jump;
private:
  inline void cb_jump_i(Fl_Button*, void*);
  static void cb_jump(Fl_Button*, void*);
public:
  Fl_Button *loop;
private:
  inline void cb_loop_i(Fl_Button*, void*);
  static void cb_loop(Fl_Button*, void*);
public:
  Fl_Button *cactus;
private:
  inline void cb_cactus_i(Fl_Button*, void*);
  static void cb_cactus(Fl_Button*, void*);
public:
  Fl_Button *mill;
private:
  inline void cb_mill_i(Fl_Button*, void*);
  static void cb_mill(Fl_Button*, void*);
public:
  Fl_Button *tree;
private:
  inline void cb_tree_i(Fl_Button*, void*);
  static void cb_tree(Fl_Button*, void*);
public:
  Fl_Button *tennis_big;
private:
  inline void cb_tennis_big_i(Fl_Button*, void*);
  static void cb_tennis_big(Fl_Button*, void*);
public:
  Fl_Button *streetlight;
private:
  inline void cb_streetlight_i(Fl_Button*, void*);
  static void cb_streetlight(Fl_Button*, void*);
public:
  Fl_Button *house;
private:
  inline void cb_house_i(Fl_Button*, void*);
  static void cb_house(Fl_Button*, void*);
public:
  Fl_Button *skyscraper;
private:
  inline void cb_skyscraper_i(Fl_Button*, void*);
  static void cb_skyscraper(Fl_Button*, void*);
public:
  Fl_Button *snake;
private:
  inline void cb_snake_i(Fl_Button*, void*);
  static void cb_snake(Fl_Button*, void*);
  inline void cb_Load_i(Fl_Button*, void*);
  static void cb_Load(Fl_Button*, void*);
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  inline void cb_New_i(Fl_Button*, void*);
  static void cb_New(Fl_Button*, void*);
public:
  Fl_Scroll *Track;
  Fl_Button *Selected;
  Fl_Window *newTrack;
  Fl_Value_Input *vCells;
private:
  inline void cb_vCells_i(Fl_Value_Input*, void*);
  static void cb_vCells(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *hCells;
private:
  inline void cb_hCells_i(Fl_Value_Input*, void*);
  static void cb_hCells(Fl_Value_Input*, void*);
public:
  Fl_Input *nter;
  Fl_Browser *selterrain;
private:
  inline void cb_ok_i(Fl_Button*, void*);
  static void cb_ok(Fl_Button*, void*);
  inline void cb_cancel_i(Fl_Button*, void*);
  static void cb_cancel(Fl_Button*, void*);
public:
  Fl_Window *saveTrack;
private:
  inline void cb_cancel1_i(Fl_Button*, void*);
  static void cb_cancel1(Fl_Button*, void*);
  inline void cb_ok1_i(Fl_Button*, void*);
  static void cb_ok1(Fl_Button*, void*);
public:
  Fl_Input *saveInternal;
private:
  inline void cb_cancel2_i(Fl_Button*, void*);
  static void cb_cancel2(Fl_Button*, void*);
  inline void cb_ok2_i(Fl_Button*, void*);
  static void cb_ok2(Fl_Button*, void*);
public:
  Fl_Input *saveStunts;
  Fl_Window *loadTrack;
private:
  inline void cb_cancel3_i(Fl_Button*, void*);
  static void cb_cancel3(Fl_Button*, void*);
  inline void cb_ok3_i(Fl_Button*, void*);
  static void cb_ok3(Fl_Button*, void*);
public:
  Fl_Input *loadInternal;
  void show( int argc, char *argv[] );
  void setCells( Fl_Button* o );
  void clearCells( Fl_Button* o );
};
#endif
